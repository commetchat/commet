import 'package:commet/client/components/emoticon/emoticon.dart';
import 'package:commet/utils/text_utils.dart';
import 'package:flutter/material.dart';
import 'package:test/test.dart';

void main() async {
  test("EmojiTest: doBigEmoji 'ğŸ˜€'", () async {
    expect(TextUtils.shouldDoBigEmoji("ğŸ˜€"), isTrue);
  });

  test("EmojiTest: doBigEmoji 'ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€'", () async {
    expect(TextUtils.shouldDoBigEmoji("ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€"), isTrue);
  });

  test("EmojiTest: doBigEmoji 'ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€'", () async {
    expect(
        TextUtils.shouldDoBigEmoji("ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€ğŸ˜€"), isFalse);
  });

  test("EmojiTest: doBigEmoji 'ağŸ˜€'", () async {
    expect(TextUtils.shouldDoBigEmoji("ağŸ˜€"), isFalse);
  });

  test("EmojiTest: doBigEmoji 'ğŸ˜€a'", () async {
    expect(TextUtils.shouldDoBigEmoji("ğŸ˜€a"), isFalse);
  });

  test("EmojiTest: doBigEmoji 'a'", () async {
    expect(TextUtils.shouldDoBigEmoji("a"), isFalse);
  });

  test("EmojiTest: Emojify 'ğŸ˜€'", () async {
    var parsed = Emoticon.emojifyString("ğŸ˜€");

    expect(parsed.length, equals(1));

    expect(parsed.first is WidgetSpan, isTrue);
  });

  test("EmojiTest: Emojify 'ağŸ˜€'", () async {
    var parsed = Emoticon.emojifyString("ağŸ˜€");

    expect(parsed.length, equals(2));

    expect(parsed.first is TextSpan, isTrue);
    expect(parsed.elementAt(1) is WidgetSpan, isTrue);
  });

  test("EmojiTest: Emojify 'ağŸ˜€a'", () async {
    var parsed = Emoticon.emojifyString("ağŸ˜€a");

    expect(parsed.length, equals(3));

    expect(parsed.first is TextSpan, isTrue);
    expect(parsed.elementAt(1) is WidgetSpan, isTrue);
    expect(parsed.last is TextSpan, isTrue);
  });

  test("EmojiTest: Emojify 'ağŸ˜€ağŸ˜€'", () async {
    var parsed = Emoticon.emojifyString("ağŸ˜€ağŸ˜€");

    expect(parsed.length, equals(4));

    expect(parsed.first is TextSpan, isTrue);
    expect(parsed.elementAt(1) is WidgetSpan, isTrue);
    expect(parsed.elementAt(2) is TextSpan, isTrue);
    expect(parsed.last is WidgetSpan, isTrue);
  });

  test("EmojiTest: Emojify 'a'", () async {
    var parsed = Emoticon.emojifyString("a");

    expect(parsed.length, equals(1));

    expect(parsed.first is TextSpan, isTrue);
  });
}
